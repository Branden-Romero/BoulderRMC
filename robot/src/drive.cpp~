#include <ros/ros.h>
#include <cmath>
#include <std_msgs/Int8MultiArray.h>
#include <geometry_msgs/Twist.h>
#include <sensor_msgs/Joy.h>
#include <inttypes.h>

int8_t MIDVAL = 187;
int8_t RANGE = 20;
ros::Publisher motor_cmd_pub;

int limit(int num)
{
	int new_num = num;
	if (num > 1)
		new_num = 1;
	return new_num;

}

void press(const sensor_msgs::Joy::ConstPtr& msg)
{
	std_msgs::Int8MultiArray cmd;
	cmd.data_length = 8;	
	cmd.data[0] = MIDVAL;
	if (msg->buttons[4] != 0.0)
		cmd.data[1] = MIDVAL - 0.4 * RANGE;
	else if (msg->axes[2] != 1.0)
		cmd.data[1] = MIDVAL + (1.0-msg->axes[2]) * RANGE;
	else
		cmd.data[1] = MIDVAL; 
	cmd.data[2] = MIDVAL;
	if (msg->buttons[5] != 0.0)
		cmd.data[3] = MIDVAL - 0.4 * RANGE;
	else if (msg->axes[5] != 1.0)
		cmd.data[3] = MIDVAL + (1.0-msg->axes[2]) * RANGE;
	else
		cmd.data[3] = MIDVAL; 
	if (msg->buttons[2] != 0.0)
		cmd.data[4] = MIDVAL - 0.4 * RANGE;
	else if (msg->buttons[3] != 1.0)
		cmd.data[4] = MIDVAL + 0.4 * RANGE;
	else
		cmd.data[4] = MIDVAL; 
	cmd.data[5] = MIDVAL;
	if (msg->buttons[7] == 1.0)
		cmd.data[6] = MIDVAL - 0.4 * RANGE;
	else if (msg->axes[7] == -1.0)
		cmd.data[6] = MIDVAL + 0.4 * RANGE;
	else
		cmd.data[6] = MIDVAL; 
	cmd.data[7] = MIDVAL;
	motor_cmd_pub.publish(cmd);
}
void drive(const geometry_msgs::Twist& msg)
{
	std_msgs::Int8MultiArray cmd;
	cmd.data_length = 8;
	double left = .4*limit(msg.linear.x + msg.angular.z);
	double right = .4*limit(msg.linear.x + msg.angular.z);
	cmd.data[0] = right*RANGE + MIDVAL;
	cmd.data[1] = MIDVAL;
	cmd.data[2] = left*RANGE + MIDVAL;;
	cmd.data[3] = MIDVAL;
	cmd.data[4] = MIDVAL;
	cmd.data[5] = right*RANGE + MIDVAL;
	cmd.data[6] = MIDVAL;
	cmd.data[7] = left*RANGE + MIDVAL;
	motor_cmd_pub.publish(cmd);
	
}

int main(int argc, char** argv)
{
	ros::init(argc,argv,"robot_driver");

	ros::NodeHandle n;

	ros::Subscriber cmd_vel_sub = n.subscribe("cmd_vel", 1000, drive);
	ros::Subscriber joy_sub = n.subscribe("joy",1000,press);
	motor_cmd_pub = n.advertise<std_msgs::Int8MultiArray>("raw_motor", 50);
	
	ros::spin();

	return 0;
}		
